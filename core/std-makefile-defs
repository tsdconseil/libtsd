# std-makefile-defs: Common definitions for Makefiles
#
# Copyright 2007-2021 ja

ifeq ($(NTHREADS),)
NTHREADS = 16
endif

-include ./build-options
$(foreach DEP,$(LIBS_EXTERNES),$(eval -include $(DEP)/build-options))


ifeq ($(TARGET),)
else
SYSTEME_EN_COURS:= $(TARGET)
endif

ifeq ($(TSUF),)
# Default is debug mode (not release mode)
TSUF:=
endif

ifeq ($(RPATH),)
# Relative path to other libraries
RPATH:= ..
endif

ifeq ($(RMODE),)
# Default is debug mode (not release mode)
RMODE:= debug
endif

# par défaut, linux
ifeq ($(SYSTEME_EN_COURS),)
SYSTEME_EN_COURS:= LINUX
endif

ifeq ($(SYSTEME_EN_COURS),LINUX)
TARGET:= LINUX
TSUF:= -linux
endif

ifeq ($(TESTS),1)
SOURCES += $(SOURCES_TEST)
EXECS_SANS_IHM += tests
endif


ADDITIONNAL_SRC_DIRS += $(AUTRES_DOSSIERS_SOURCES)
ADDITIONNAL_LOPT     += $(OPTIONS_LINK)

ADDITIONNAL_INC_DIRS += $(OPTIONS_COMPIL)

CDEFS += -DVMAJ=$(VMAJ) -DVMIN=$(VMIN) -DVPATCH=$(VPATCH)

########################################
###### LINUX/I386 TARGET
########################################
ifeq ($(TARGET),LINUX)
ECHO=  echo
EXESUF :=
COPTADD  = -DLINUX -DLINUX_RUN -fPIC -isystem /usr/include/gtkmm-3.0

GTKREV  = 3.0

GTK_DIR= `pkg-config --cflags gtkmm-$(GTKREV)`
GTK_LIB= `pkg-config --libs gtkmm-$(GTKREV)` -lpthread
LOPTADD   := -lrt -L/lib/x86_64-linux-gnu
else
########################################
###### WIN32 TARGET
########################################
ECHO= echo -e
TARGET= WIN
EXESUF := .exe
COPTADD= -DWIN  -D_USE_MATH_DEFINES
# -isystem c:/GTK/include/gtkmm-2.4 -Ic:/GnuWin32/include 
GTKREV  =3.0
GTK_DIR= `pkg-config --cflags gtkmm-$(GTKREV)`
GTK_LIB= `pkg-config --libs gtkmm-$(GTKREV)` -lgthread-2.0


LOPTADD := -lws2_32 -lwinmm  -LC:/GnuWin32/lib
# -lpng 

ifeq ($(RMODE),debug)
else
LOPTADD := $(LOPTADD) -mwindows
endif
endif


GENERAL_BUILD_DIR := ./build
BUILD_DIR   := $(GENERAL_BUILD_DIR)/$(RMODE)$(TSUF)

INCDIR := $(ADDITIONNAL_INC_DIRS) -I$(BUILD_DIR) -Iinclude -Ientetes $(GTK_DIR)

# Library to build
CURRENT_LIB_BASE= $(BUILD_DIR)/lib-base.a
CURRENT_LIB     = $(BUILD_DIR)/lib.a


SOURCES_BASE := $(SOURCES) $(SOURCES_NO_GTK)
SOURCES      := $(SOURCES_GTK) $(SOURCES) $(SOURCES_EXT) 


OBJECTFILES      := $(patsubst %,$(BUILD_DIR)/objs/%.o,$(SOURCES))
OBJECTFILES_BASE := $(patsubst %,$(BUILD_DIR)/objs/%.o,$(SOURCES_BASE))
EXEFILES           := $(patsubst %,$(BUILD_DIR)/%.exe,$(EXECS))
EXEFILES_SANS_IHM  := $(patsubst %,$(BUILD_DIR)/%.exe,$(EXECS_SANS_IHM))

EXT_LIBS        := $(patsubst %,%/build/$(RMODE)$(TSUF)/lib.a,$(LIBS_EXTERNES))
EXT_LIBS        += $(patsubst %,%/build/$(RMODE)$(TSUF)/lib-base.a,$(LIBS_EXTERNES_BASE))

EXT_LIBS_PRE    := $(patsubst %,%/build/$(RMODE)$(TSUF)/lib.a,$(LIBS_EXTERNES_PRE)) 

EXT_INC         := $(patsubst %,-I%/include,$(LIBS_EXTERNES))
EXT_INC         += $(patsubst %,-I%/include,$(LIBS_EXTERNES_BASE))
EXT_INC         += $(patsubst %,-I%/include,$(LIBS_EXTERNES_PRE))

# directories to locate the source (for make usage)

VPATH_SRC  := $(BUILD_DIR) ./src ./src/test ./include $(ADDITIONNAL_SRC_DIRS)
#VPATH_DATA := data $(RPATH)/libcutil/data  $(ADDITIONNAL_DATA_DIRS)
#VPATH_IMG  := $(patsubst %,%/img,$(VPATH_DATA))


vpath %.h   $(VPATH_SRC)
vpath %.cc  $(VPATH_SRC)
vpath %.c   $(VPATH_SRC)
vpath %.y   $(VPATH_SRC)

# Model files to copy from libcutil
MODEL_FILES := std-lang.xml std-schema.xml view-schema.xml $(XML_FILES) $(DATA_FILES)

IMG_FILES := edit16.gif  gtk-go-down16.png  gtk-go-up16.png  mod16.png  open16.gif $(IMG_FILES)

IMG_FILES   := $(patsubst %,$(BUILD_DIR)/data/img/%,$(IMG_FILES))
MODEL_FILES := $(patsubst %,$(BUILD_DIR)/data/%,$(MODEL_FILES))

#####################################################################
## Compiler options                                                ##
#####################################################################
COPT = $(COPTADD) -Wall -MMD -MP -MF $(BUILD_DIR)/.dep/$(@F).d -Wno-write-strings -DBT_SOCKET_DISABLE=0 $(ADDITIONNAL_COPT) $(INCDIR)
COPT += -Wno-attributes

ifeq ($(RMODE),debug)
LOPT = $(OPTIONS_LINK_DEBUG)
#  -fstack-protector-all
COPT += $(OPTIONS_COMPIL_DEBUG)
COPT += -g -DDEBUG_MODE -DMODE_DEBUG=1 -DMODE_RELEASE=0 -Og
#-O1
#-Og
# -fstack-protector-all
# -O1
#-g1 
#-O3
COPT += -march=native
# -O2
# -O2 
else
LOPT = $(OPTIONS_LINK_RELEASE)
COPT += $(OPTIONS_COMPIL_RELEASE)
# NDEBUG pour désactiver les assertions
COPT += -DRELEASE_MODE -DMODE_DEBUG=0 -DMODE_RELEASE=1 -DNDEBUG
# -Ofast 
COPT += -O3
COPT += -march=x86-64
# COPT += -march=native -ffast-math 
COPT += -DEIGEN_NO_DEBUG 
#COPT += -O0 -g
#LOPT += -static
#-Wl,--static 
endif

COPT += $(EXT_INC) -fcx-limited-range

COPT += -Wno-int-in-bool-context

COPT += -Wno-attributes

CPPFLAGS += $(COPT)
CFLAGS   += $(COPT)
CXXFLAGS += $(COPT) -std=c++20

#####################################################################
## Linker options                                                  ##
#####################################################################

# External libraries
ELIBS   := $(EXT_LIBS_PRE) $(CURRENT_LIB) $(EXT_LIBS)

LDFLAGS+= $(ELIBS) $(LOPTADD)  

ifeq ($(AVEC_GTK),0)
else
LDFLAGS+= $(GTK_LIB)
endif

LDFLAGS+= $(LOPT) $(ADDITIONNAL_LOPT)

ifeq ($(RMODE),release)
LDFLAGS+= -Wl,-s
endif

PRECOMP    = $(BUILD_DIR)/precompile.h.gch
PRECOMP_IN = $(RPATH)/libcutil/include/precompile.h

#####################################################################
## Production rules                                                ##
#####################################################################

CLSCMDE := 

ifeq ($(RMODE),debug)
 CLSCMDE := clear && clear
endif

.PHONY : clean distclean check-dirs data-update

# Default targets
all:  cls all-nocls

all-nocls: check-dirs data-update $(FIRST_TARGETS) $(ADDITIONNAL_OBJS) $(CURRENT_LIB) $(CURRENT_LIB_BASE)  $(EXEFILES) $(EXEFILES_SANS_IHM) $(ADDITIONNAL_TARGETS) 

cls:
	@printf "\033c"
	@$(CLSCMDE)

#	@clear && clear


libs-base: check-dirs data-update $(CURRENT_LIB_BASE)

libs: check-dirs $(CURRENT_LIB) $(CURRENT_LIB_BASE)

display:
	@$(ECHO) "Liste des dependances pour les executables: $(ELIBS)"

check-dirs:
	@test -d $(GENERAL_BUILD_DIR) || mkdir $(GENERAL_BUILD_DIR)
	@test -d $(BUILD_DIR) || mkdir $(BUILD_DIR)
	@test -d $(BUILD_DIR)/objs || mkdir $(BUILD_DIR)/objs
	@test -d $(BUILD_DIR)/objs-exe || mkdir $(BUILD_DIR)/objs-exe
	@test -d $(BUILD_DIR)/.dep || mkdir $(BUILD_DIR)/.dep
	@test -d $(BUILD_DIR)/data || mkdir $(BUILD_DIR)/data
	@test -d $(BUILD_DIR)/data/img || mkdir $(BUILD_DIR)/data/img




data-update:
	@echo "Mise a jour des fichiers de donnees..."
	@$(foreach DDIR,$(LIBS_EXTERNES), sh -c "if [ -d $(DDIR)/data ] ; then cp -r -f -u $(DDIR)/data $(BUILD_DIR) ; fi";)
	@$(foreach DDIR,$(LIBS_EXTERNES_BASE), sh -c "if [ -d $(DDIR)/data ] ; then cp -r -f -u $(DDIR)/data $(BUILD_DIR) ; fi";)
	@$(foreach DDIR,$(LIBS_EXTERNES_PRE), sh -c "if [ -d $(DDIR)/data ] ; then cp -r -f -u $(DDIR)/data $(BUILD_DIR) ; fi";)
	@if [ -d ./data ] ; then cp -r -f -u ./data $(BUILD_DIR) ; fi



##################################
# Implicit rules
##################################

$(BUILD_DIR)/objs-exe/%o : %cc
	@$(ECHO) "Compilation prog. c++ : \033[1m$<\033[0m..."
	@$(CXX) -c $(CXXFLAGS) $< -o $@

$(BUILD_DIR)/objs-exe/%o : %c
	@$(ECHO) "Compilation prog. c : \033[1m$<\033[0m..."
	@$(CC) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/objs/%o : %cc
	@$(ECHO) "Compilation c++ : \033[1m$<\033[0m..."
	@$(CXX) -c $(CXXFLAGS) $< -o $@

$(BUILD_DIR)/objs/%o : %c
	@$(ECHO) "Compilation c : \033[1m$<\033[0m..."
	@$(CC) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/%.exe:  $(BUILD_DIR)/objs-exe/%.o $(ELIBS)
	@$(ECHO) "Construction de l'executable \033[34m$@\033[0m..."
	@$(CXX) $<  $(LDFLAGS) -o $@ 

# -Wl,--static 

##################################
# Libraries
##################################
lib: $(CURRENT_LIB)

$(CURRENT_LIB): $(OBJECTFILES)
	@$(ECHO) "Construction de la librairie : \033[1m$@\033[0m..."
	@rm -f $@
	@ar rvs $@ $(OBJECTFILES) $(ADDITIONNAL_OBJS) >> /dev/null

$(CURRENT_LIB_BASE): $(OBJECTFILES_BASE)
	@$(ECHO) "Construction de la librairie reduite : \033[31m$@\033[0m..."
	@rm -f $@
	@ar rvs $@ $(OBJECTFILES_BASE)  >> /dev/null
	
$(PRECOMP): $(PRECOMP_IN)
	@$(ECHO) "Construction en-tete precompile..."
	@$(CXX) $(CXXFLAGS) $< -o $@


tests: 


##################################
# Misc. targets
##################################
usage:
	@$(ECHO) "\033[1mUtilisation du Makefile:\033[0m"
	@$(ECHO) ""
	@$(ECHO) "make"
	@$(ECHO) "  -> Build for default target (mingw/windows) and default mode (debug)"
	@$(ECHO) ""
	@$(ECHO) "make TARGET=linux|win|ppc RMODE=debug|release"
	@$(ECHO) "  -> Build for specific target and mode."
	@$(ECHO) ""

clean:
	@echo "Nettoyage..."
	@- $(RM) -f $(ADDITIONNAL_CLEAN) $(ADDITIONNAL_TARGETS)
	@- $(RM) -rf ./log.txt ./theme-sel.txt
	@- $(RM) -rf $(GENERAL_BUILD_DIR)

distclean: clean




release:
	@echo "Construction de toutes les dépendances en mode RELEASE..."
	@$(foreach DDIR,$(LIBS_EXTERNES), sh -c "cd $(DDIR); make libs -j $(NTHREADS) RMODE=release || exit";)
	@$(foreach DDIR,$(LIBS_EXTERNES_BASE), sh -c "cd $(DDIR); make libs -j $(NTHREADS) RMODE=release || exit";)
	@make all-nocls -j $(NTHREADS) RMODE=release 

debug:
	@echo "Construction de toutes les dépendances en mode DEBUG..."
	@$(foreach DDIR,$(LIBS_EXTERNES), sh -c "cd $(DDIR); make libs -j $(NTHREADS) SYSTEME_EN_COURS=$(SYSTEME_EN_COURS) TARGET=$(TARGET) || exit";)
	@$(foreach DDIR,$(LIBS_EXTERNES_BASE), sh -c "cd $(DDIR); make libs -j $(NTHREADS) SYSTEME_EN_COURS=$(SYSTEME_EN_COURS) TARGET=$(TARGET) || exit";)
	@$(foreach DDIR,$(LIBS_EXTERNES_PRE), sh -c "cd $(DDIR); make libs -j $(NTHREADS) SYSTEME_EN_COURS=$(SYSTEME_EN_COURS) TARGET=$(TARGET) || exit";)
	@make all-nocls -j $(NTHREADS)  SYSTEME_EN_COURS=$(SYSTEME_EN_COURS) TARGET=$(TARGET) 
	


	
clean-deps:
	@echo "Nettoyage de toutes les dépendances..."
	@$(foreach DDIR,$(LIBS_EXTERNES), sh -c "cd $(DDIR); make clean || exit";)
	@$(foreach DDIR,$(LIBS_EXTERNES_BASE), sh -c "cd $(DDIR); make clean || exit";)
	@$(foreach DDIR,$(LIBS_EXTERNES_PRE), sh -c "cd $(DDIR); make clean || exit";)
	@make clean

nsis:
	"C:/Program Files (x86)/NSIS/makensis.exe" -V4 ./installeur/installeur.nsi

nsis-patch:
	"C:/Program Files (x86)/NSIS/makensis" ./installeur/installeur.nsi /DMODE_PATCH

# Auto-generate source files dependencies.
-include $(shell mkdir $(BUILD_DIR)/.dep 2>/dev/null) $(wildcard $(BUILD_DIR)/.dep/*)
